function delay_complex(delay, n_bits, bin_pt, use_bram, bram_latency)


%% inports
xlsub2_In1 = xInport('In1');

%% outports
xlsub2_Out1 = xOutport('Out1');

%% diagram

% block: more_delays/delay_complex/c_to_ri
xlsub2_c_to_ri_out1 = xSignal;
xlsub2_c_to_ri_out2 = xSignal;
xlsub2_c_to_ri = xBlock(struct('source', 'casper_library_misc/c_to_ri', 'name', 'c_to_ri'), ...
                        struct('n_bits', 18, ...
                               'bin_pt', 17), ...
                        {xlsub2_In1}, ...
                        {xlsub2_c_to_ri_out1, xlsub2_c_to_ri_out2});

% block: more_delays/delay_complex/ri_to_c
xlsub2_delay1_out1 = xSignal;
xlsub2_delay2_out1 = xSignal;
xlsub2_ri_to_c = xBlock(struct('source', 'casper_library_misc/ri_to_c', 'name', 'ri_to_c'), ...
                        [], ...
                        {xlsub2_delay1_out1, xlsub2_delay2_out1}, ...
                        {xlsub2_Out1});

% block: more_delays/delay_complex/delay1
xlsub2_delay1_sub = xBlock(struct('source', @xlsub2_delay1, 'name', 'delay1'), ...
                       {delay, bram_latency}, ...
                       {xlsub2_c_to_ri_out1}, ...
                       {xlsub2_delay1_out1});

% block: more_delays/delay_complex/delay2
xlsub2_delay2_sub = xBlock(struct('source', @xlsub2_delay2, 'name', 'delay2'), ...
                       {delay, bram_latency}, ...
                       {xlsub2_c_to_ri_out2}, ...
                       {xlsub2_delay2_out1});



function xlsub2_delay1(DelayLen, bram_latency)


% Mask Initialization code
if (DelayLen <= bram_latency)
	error('delay value must be greater than BRAM Latency');
end
BitWidth = max(ceil(log2(DelayLen)), 2);

%% inports
xlsub3_In1 = xInport('In1');

%% outports
xlsub3_Out1 = xOutport('Out1');

%% diagram

% block: more_delays/delay_complex/delay1/Constant2
xlsub3_Constant2_out1 = xSignal;
xlsub3_Constant2 = xBlock(struct('source', 'Constant', 'name', 'Constant2'), ...
                          struct('arith_type', 'Boolean', ...
                                 'n_bits', 1, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {xlsub3_Constant2_out1});

% block: more_delays/delay_complex/delay1/Counter
xlsub3_Counter_out1 = xSignal;
xlsub3_Counter = xBlock(struct('source', 'Counter', 'name', 'Counter'), ...
                        struct('cnt_type', 'Count Limited', ...
                               'cnt_to', DelayLen - bram_latency - 1, ...
                               'n_bits', BitWidth, ...
                               'explicit_period', 'off', ...
                               'use_rpm', 'off'), ...
                        {}, ...
                        {xlsub3_Counter_out1});

% block: more_delays/delay_complex/delay1/Single Port RAM
xlsub3_Single_Port_RAM = xBlock(struct('source', 'Single Port RAM', 'name', 'Single Port RAM'), ...
                                struct('depth', 2^BitWidth, ...
                                       'initVector', 0, ...
                                       'write_mode', 'Read Before Write', ...
                                       'latency', bram_latency, ...
                                       'use_rpm', 'off'), ...
                                {xlsub3_Counter_out1, xlsub3_In1, xlsub3_Constant2_out1}, ...
                                {xlsub3_Out1});



end

function xlsub2_delay2(DelayLen, bram_latency)


% Mask Initialization code
if (DelayLen <= bram_latency)
	error('delay value must be greater than BRAM Latency');
end
BitWidth = max(ceil(log2(DelayLen)), 2);

%% inports
xlsub3_In1 = xInport('In1');

%% outports
xlsub3_Out1 = xOutport('Out1');

%% diagram

% block: more_delays/delay_complex/delay2/Constant2
xlsub3_Constant2_out1 = xSignal;
xlsub3_Constant2 = xBlock(struct('source', 'Constant', 'name', 'Constant2'), ...
                          struct('arith_type', 'Boolean', ...
                                 'n_bits', 1, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {xlsub3_Constant2_out1});

% block: more_delays/delay_complex/delay2/Counter
xlsub3_Counter_out1 = xSignal;
xlsub3_Counter = xBlock(struct('source', 'Counter', 'name', 'Counter'), ...
                        struct('cnt_type', 'Count Limited', ...
                               'cnt_to', DelayLen - bram_latency - 1, ...
                               'n_bits', BitWidth, ...
                               'explicit_period', 'off', ...
                               'use_rpm', 'off'), ...
                        {}, ...
                        {xlsub3_Counter_out1});

% block: more_delays/delay_complex/delay2/Single Port RAM
xlsub3_Single_Port_RAM = xBlock(struct('source', 'Single Port RAM', 'name', 'Single Port RAM'), ...
                                struct('depth', 2^BitWidth, ...
                                       'initVector', 0, ...
                                       'write_mode', 'Read Before Write', ...
                                       'latency', bram_latency, ...
                                       'use_rpm', 'off'), ...
                                {xlsub3_Counter_out1, xlsub3_In1, xlsub3_Constant2_out1}, ...
                                {xlsub3_Out1});



end

end

