function cmult(n_bits_a, bin_pt_a, n_bits_b, bin_pt_b, n_bits_ab, bin_pt_ab, quantization, overflow, mult_latency, add_latency, conjugated)
% This is a generated function based on subsystem:
%     twiddles_collections/cmult
% Though there are limitations about the generated script, 
% the main purpose of this utility is to make learning
% Sysgen Script easier.
% 
% To test it, run the following commands from MATLAB console:
% cfg.source = str2func('cmult');
% cfg.toplevel = 'twiddles_collections/cmult';
% args = {my_n_bits_a, my_bin_pt_a, my_n_bits_b, my_bin_pt_b, my_n_bits_ab, my_bin_pt_ab, my_quantization, my_overflow, my_mult_latency, my_add_latency, my_conjugated};
% xBlock(cfg, args);
% 
% You can edit cmult.m to debug your script.
% 
% You can also replace the MaskInitialization code with the 
% following commands so the subsystem will be generated 
% according to the values of mask parameters.
% cfg.source = str2func('cmult');
% cfg.toplevel = gcb;
% args = {n_bits_a, bin_pt_a, n_bits_b, bin_pt_b, n_bits_ab, bin_pt_ab, quantization, overflow, mult_latency, add_latency, conjugated};
% xBlock(cfg, args);
% 
% To configure the xBlock call in debug mode, in which mode,
% autolayout will be performed every time a block is added,
% run the following commands:
% cfg.source = str2func('cmult');
% cfg.toplevel = gcb;
% cfg.debug = 1;
% args = {n_bits_a, bin_pt_a, n_bits_b, bin_pt_b, n_bits_ab, bin_pt_ab, quantization, overflow, mult_latency, add_latency, conjugated};
% xBlock(cfg, args);
% 
% To make the xBlock smart so it won't re-generate the
% subsystem if neither the arguments nor the scripts are
% changes, use as the following:
% cfg.source = str2func('cmult');
% cfg.toplevel = gcb;
% cfg.depend = {'cmult'};
% args = {n_bits_a, bin_pt_a, n_bits_b, bin_pt_b, n_bits_ab, bin_pt_ab, quantization, overflow, mult_latency, add_latency, conjugated};
% xBlock(cfg, args);
% 
% See also xBlock, xInport, xOutport, xSignal, xlsub2script.


%% inports
xlsub2_a = xInport('a');
xlsub2_b = xInport('b');

%% outports
xlsub2_ab = xOutport('ab');

%% diagram

% block: twiddles_collections/cmult/addsub_im
xlsub2_imre_out1 = xSignal;
xlsub2_reim_out1 = xSignal;
xlsub2_addsub_im_out1 = xSignal;
xlsub2_addsub_im = xBlock(struct('source', 'AddSub', 'name', 'addsub_im'), ...
                          struct('latency', 2, ...
                                 'arith_type', 'Signed  (2''s comp)', ...
                                 'n_bits', 15, ...
                                 'use_behavioral_HDL', 'on', ...
                                 'pipelined', 'on', ...
                                 'use_rpm', 'on'), ...
                          {xlsub2_imre_out1, xlsub2_reim_out1}, ...
                          {xlsub2_addsub_im_out1});

% block: twiddles_collections/cmult/addsub_re
xlsub2_rere_out1 = xSignal;
xlsub2_imim_out1 = xSignal;
xlsub2_addsub_re_out1 = xSignal;
xlsub2_addsub_re = xBlock(struct('source', 'AddSub', 'name', 'addsub_re'), ...
                          struct('mode', 'Subtraction', ...
                                 'latency', 2, ...
                                 'arith_type', 'Signed  (2''s comp)', ...
                                 'n_bits', 15, ...
                                 'use_behavioral_HDL', 'on', ...
                                 'pipelined', 'on', ...
                                 'use_rpm', 'on'), ...
                          {xlsub2_rere_out1, xlsub2_imim_out1}, ...
                          {xlsub2_addsub_re_out1});

% block: twiddles_collections/cmult/c_to_ri
xlsub2_c_to_ri_out1 = xSignal;
xlsub2_c_to_ri_out2 = xSignal;
xlsub2_c_to_ri = xBlock(struct('source', 'casper_library_misc/c_to_ri', 'name', 'c_to_ri'), ...
                        struct('n_bits', 18, ...
                               'bin_pt', 17), ...
                        {xlsub2_a}, ...
                        {xlsub2_c_to_ri_out1, xlsub2_c_to_ri_out2});

% block: twiddles_collections/cmult/c_to_ri1
xlsub2_c_to_ri1_out1 = xSignal;
xlsub2_c_to_ri1_out2 = xSignal;
xlsub2_c_to_ri1 = xBlock(struct('source', 'casper_library_misc/c_to_ri', 'name', 'c_to_ri1'), ...
                         struct('n_bits', 18, ...
                                'bin_pt', 17), ...
                         {xlsub2_b}, ...
                         {xlsub2_c_to_ri1_out1, xlsub2_c_to_ri1_out2});

% block: twiddles_collections/cmult/convert_im
xlsub2_convert_im_out1 = xSignal;
xlsub2_convert_im = xBlock(struct('source', 'Convert', 'name', 'convert_im'), ...
                           struct('n_bits', 37, ...
                                  'bin_pt', 34, ...
                                  'pipeline', 'on'), ...
                           {xlsub2_addsub_im_out1}, ...
                           {xlsub2_convert_im_out1});

% block: twiddles_collections/cmult/convert_re
xlsub2_convert_re_out1 = xSignal;
xlsub2_convert_re = xBlock(struct('source', 'Convert', 'name', 'convert_re'), ...
                           struct('n_bits', 37, ...
                                  'bin_pt', 34, ...
                                  'pipeline', 'on'), ...
                           {xlsub2_addsub_re_out1}, ...
                           {xlsub2_convert_re_out1});

% block: twiddles_collections/cmult/imim
xlsub2_imim = xBlock(struct('source', 'Mult', 'name', 'imim'), ...
                     struct('n_bits', 15, ...
                            'placement_style', 'Rectangular shape'), ...
                     {xlsub2_c_to_ri_out2, xlsub2_c_to_ri1_out2}, ...
                     {xlsub2_imim_out1});

% block: twiddles_collections/cmult/imre
xlsub2_imre = xBlock(struct('source', 'Mult', 'name', 'imre'), ...
                     struct('n_bits', 15, ...
                            'placement_style', 'Rectangular shape'), ...
                     {xlsub2_c_to_ri_out1, xlsub2_c_to_ri1_out2}, ...
                     {xlsub2_imre_out1});

% block: twiddles_collections/cmult/reim
xlsub2_reim = xBlock(struct('source', 'Mult', 'name', 'reim'), ...
                     struct('n_bits', 15, ...
                            'placement_style', 'Rectangular shape'), ...
                     {xlsub2_c_to_ri_out2, xlsub2_c_to_ri1_out1}, ...
                     {xlsub2_reim_out1});

% block: twiddles_collections/cmult/rere
xlsub2_rere = xBlock(struct('source', 'Mult', 'name', 'rere'), ...
                     struct('n_bits', 15, ...
                            'placement_style', 'Rectangular shape'), ...
                     {xlsub2_c_to_ri_out1, xlsub2_c_to_ri1_out1}, ...
                     {xlsub2_rere_out1});

% block: twiddles_collections/cmult/ri_to_c
xlsub2_ri_to_c = xBlock(struct('source', 'casper_library_misc/ri_to_c', 'name', 'ri_to_c'), ...
                        [], ...
                        {xlsub2_convert_re_out1, xlsub2_convert_im_out1}, ...
                        {xlsub2_ab});



end

