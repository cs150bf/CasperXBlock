%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
%   Center for Astronomy Signal Processing and Electronics Research           %
%   http://casper.berkeley.edu                                                %      
%   Copyright (C) 2011 Suraj Gowda, Hong Chen                                 %
%                                                                             %
%   This program is free software; you can redistribute it and/or modify      %
%   it under the terms of the GNU General Public License as published by      %
%   the Free Software Foundation; either version 2 of the License, or         %
%   (at your option) any later version.                                       %
%                                                                             %
%   This program is distributed in the hope that it will be useful,           %
%   but WITHOUT ANY WARRANTY; without even the implied warranty of            %
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             %
%   GNU General Public License for more details.                              %
%                                                                             %
%   You should have received a copy of the GNU General Public License along   %
%   with this program; if not, write to the Free Software Foundation, Inc.,   %
%   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.               %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function sync_delay_en_init_xblock(blk, DelayLen)

    
% Mask Initialization code
BitWidth = max(2, ceil(log2(DelayLen+1)));
UseCounter = 1;
if DelayLen == 0,
	UseCounter = 0;
end

%% inports
xlsub2_In = xInport('In');
xlsub2_en = xInport('en');

%% outports
xlsub2_Out = xOutport('Out');

%% diagram

% block: delay_7/sync_delay_en/Constant
xlsub2_Constant_out1 = xSignal;
xlsub2_Constant = xBlock(struct('source', 'Constant', 'name', 'Constant'), ...
                         struct('arith_type', 'Unsigned', ...
                                'n_bits', BitWidth, ...
                                'bin_pt', 0, ...
                                'explicit_period', 'on'), ...
                         {}, ...
                         {xlsub2_Constant_out1});

% block: delay_7/sync_delay_en/Constant1
xlsub2_Constant1_out1 = xSignal;
xlsub2_Constant1 = xBlock(struct('source', 'Constant', 'name', 'Constant1'), ...
                          struct('arith_type', 'Unsigned', ...
                                 'const', 0, ...
                                 'n_bits', BitWidth, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {xlsub2_Constant1_out1});

% block: delay_7/sync_delay_en/Constant2
xlsub2_Constant2_out1 = xSignal;
xlsub2_Constant2 = xBlock(struct('source', 'Constant', 'name', 'Constant2'), ...
                          struct('arith_type', 'Unsigned', ...
                                 'const', DelayLen, ...
                                 'n_bits', BitWidth, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {xlsub2_Constant2_out1});

% block: delay_7/sync_delay_en/Constant3
xlsub2_Constant3_out1 = xSignal;
xlsub2_Constant3 = xBlock(struct('source', 'Constant', 'name', 'Constant3'), ...
                          struct('arith_type', 'Unsigned', ...
                                 'const', UseCounter, ...
                                 'n_bits', 1, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {xlsub2_Constant3_out1});

% block: delay_7/sync_delay_en/Counter
xlsub2_Logical1_out1 = xSignal;
xlsub2_Counter_out1 = xSignal;
xlsub2_Counter = xBlock(struct('source', 'Counter', 'name', 'Counter'), ...
                        struct('operation', 'Down', ...
                               'n_bits', BitWidth, ...
                               'load_pin', 'on', ...
                               'en', 'on', ...
                               'use_rpm', 'on'), ...
                        {xlsub2_In, xlsub2_Constant2_out1, xlsub2_Logical1_out1}, ...
                        {xlsub2_Counter_out1});

% block: delay_7/sync_delay_en/Logical
xlsub2_Relational1_out1 = xSignal;
xlsub2_Logical_out1 = xSignal;
xlsub2_Logical = xBlock(struct('source', 'Logical', 'name', 'Logical'), ...
                        struct('logical_function', 'OR', ...
                               'n_bits', 8, ...
                               'bin_pt', 2), ...
                        {xlsub2_In, xlsub2_Relational1_out1}, ...
                        {xlsub2_Logical_out1});

% block: delay_7/sync_delay_en/Logical1
xlsub2_Logical1 = xBlock(struct('source', 'Logical', 'name', 'Logical1'), ...
                         struct('n_bits', 8, ...
                                'bin_pt', 2), ...
                         {xlsub2_Logical_out1, xlsub2_en}, ...
                         {xlsub2_Logical1_out1});

% block: delay_7/sync_delay_en/Mux
xlsub2_Relational_out1 = xSignal;
xlsub2_Mux = xBlock(struct('source', 'Mux', 'name', 'Mux'), ...
                    struct('arith_type', 'Signed  (2''s comp)', ...
                           'n_bits', 8, ...
                           'bin_pt', 2), ...
                    {xlsub2_Constant3_out1, xlsub2_In, xlsub2_Relational_out1}, ...
                    {xlsub2_Out});

% block: delay_7/sync_delay_en/Relational
xlsub2_Relational = xBlock(struct('source', 'Relational', 'name', 'Relational'), ...
                           struct('latency', 0), ...
                           {xlsub2_Constant_out1, xlsub2_Counter_out1}, ...
                           {xlsub2_Relational_out1});

% block: delay_7/sync_delay_en/Relational1
xlsub2_Relational1 = xBlock(struct('source', 'Relational', 'name', 'Relational1'), ...
                            struct('mode', 'a!=b', ...
                                   'latency', 0), ...
                            {xlsub2_Counter_out1, xlsub2_Constant1_out1}, ...
                            {xlsub2_Relational1_out1});

% block: delay_7/sync_delay_en/warn period Logical0
xlsub2_warn_period_Logical0 = xBlock(struct('source', 'xbsReplacements_r4/Warning', 'name', 'warn period Logical0'), ...
                                     struct('period', 1), ...
                                     {}, ...
                                     {});

% block: delay_7/sync_delay_en/warn period Logical10
xlsub2_warn_period_Logical10 = xBlock(struct('source', 'xbsReplacements_r4/Warning', 'name', 'warn period Logical10'), ...
                                      struct('period', 1), ...
                                      {}, ...
                                      {});

% block: delay_7/sync_delay_en/warn period Relational10
xlsub2_warn_period_Relational10 = xBlock(struct('source', 'xbsReplacements_r4/Warning', 'name', 'warn period Relational10'), ...
                                         struct('period', 1), ...
                                         {}, ...
                                         {});


if ~isempty(blk) && ~strcmp(blk(1), '/')
    clean_blocks(blk);
end
end

