function mycic_dec3_poly()
% This is a generated function based on subsystem:
%     cic_dec3_poly_model/mycic_dec3_poly
% Though there are limitations about the generated script, 
% the main purpose of this utility is to make learning
% Sysgen Script easier.
% 
% To test it, run the following commands from MATLAB console:
% cfg.source = str2func('mycic_dec3_poly');
% cfg.toplevel = 'cic_dec3_poly_model/mycic_dec3_poly';
% args = {};
% xBlock(cfg, args);
% 
% You can edit mycic_dec3_poly.m to debug your script.
% 
% You can also replace the MaskInitialization code with the 
% following commands so the subsystem will be generated 
% according to the values of mask parameters.
% cfg.source = str2func('mycic_dec3_poly');
% cfg.toplevel = gcb;
% args = {};
% xBlock(cfg, args);
% 
% To configure the xBlock call in debug mode, in which mode,
% autolayout will be performed every time a block is added,
% run the following commands:
% cfg.source = str2func('mycic_dec3_poly');
% cfg.toplevel = gcb;
% cfg.debug = 1;
% args = {};
% xBlock(cfg, args);
% 
% To make the xBlock smart so it won't re-generate the
% subsystem if neither the arguments nor the scripts are
% changes, use as the following:
% cfg.source = str2func('mycic_dec3_poly');
% cfg.toplevel = gcb;
% cfg.depend = {'mycic_dec3_poly'};
% args = {};
% xBlock(cfg, args);
% 
% See also xBlock, xInport, xOutport, xSignal, xlsub2script.


%% inports
xlsub2_in = xInport('in');
xlsub2_sync = xInport('sync');

%% outports
xlsub2_out = xOutport('out');
xlsub2_sync_out = xOutport('sync_out');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/Down_sample0
xlsub2_Down_sample0_out1 = xSignal;
xlsub2_Down_sample0 = xBlock(struct('source', 'Down Sample', 'name', 'Down_sample0'), ...
                             struct('sample_ratio', 3), ...
                             {xlsub2_in}, ...
                             {xlsub2_Down_sample0_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/Down_sample1
xlsub2_first_delay_out1 = xSignal;
xlsub2_Down_sample1_out1 = xSignal;
xlsub2_Down_sample1 = xBlock(struct('source', 'Down Sample', 'name', 'Down_sample1'), ...
                             struct('sample_ratio', 3), ...
                             {xlsub2_first_delay_out1}, ...
                             {xlsub2_Down_sample1_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/Down_sample2
xlsub2_second_delay_out1 = xSignal;
xlsub2_Down_sample2_out1 = xSignal;
xlsub2_Down_sample2 = xBlock(struct('source', 'Down Sample', 'name', 'Down_sample2'), ...
                             struct('sample_ratio', 3), ...
                             {xlsub2_second_delay_out1}, ...
                             {xlsub2_Down_sample2_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/first_delay
xlsub2_first_delay = xBlock(struct('source', 'Delay', 'name', 'first_delay'), ...
                            [], ...
                            {xlsub2_in}, ...
                            {xlsub2_first_delay_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/second_delay
xlsub2_second_delay = xBlock(struct('source', 'Delay', 'name', 'second_delay'), ...
                             [], ...
                             {xlsub2_first_delay_out1}, ...
                             {xlsub2_second_delay_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/sync_delay
xlsub2_adder_tree_out1 = xSignal;
xlsub2_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           struct('latency', 2), ...
                           {xlsub2_adder_tree_out1}, ...
                           {xlsub2_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/adder_tree
xlsub2_polynomial2_out2 = xSignal;
xlsub2_polynomial2_out1 = xSignal;
xlsub2_polynomial1_out1 = xSignal;
xlsub2_polynomial0_out1 = xSignal;
xlsub2_adder_tree_sub = xBlock(struct('source', @xlsub2_adder_tree, 'name', 'adder_tree'), ...
                           {}, ...
                           {xlsub2_polynomial2_out2, xlsub2_polynomial2_out1, xlsub2_polynomial1_out1, xlsub2_polynomial0_out1}, ...
                           {xlsub2_adder_tree_out1, xlsub2_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0
xlsub2_polynomial0_sub = xBlock(struct('source', @xlsub2_polynomial0, 'name', 'polynomial0'), ...
                            {}, ...
                            {xlsub2_Down_sample2_out1, xlsub2_sync}, ...
                            {xlsub2_polynomial0_out1, []});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1
xlsub2_polynomial1_sub = xBlock(struct('source', @xlsub2_polynomial1, 'name', 'polynomial1'), ...
                            {}, ...
                            {xlsub2_Down_sample1_out1, xlsub2_sync}, ...
                            {xlsub2_polynomial1_out1, []});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2
xlsub2_polynomial2_sub = xBlock(struct('source', @xlsub2_polynomial2, 'name', 'polynomial2'), ...
                            {}, ...
                            {xlsub2_Down_sample0_out1, xlsub2_sync}, ...
                            {xlsub2_polynomial2_out1, xlsub2_polynomial2_out2});



function xlsub2_adder_tree()



%% inports
xlsub3_sync = xInport('sync');
xlsub3_din_1 = xInport('din_1');
xlsub3_din_2 = xInport('din_2');
xlsub3_din_3 = xInport('din_3');

%% outports
xlsub3_sync_out = xOutport('sync_out');
xlsub3_dout = xOutport('dout');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/adder_tree/adder_0
xlsub3_adder_0_out1 = xSignal;
xlsub3_adder_0 = xBlock(struct('source', 'AddSub', 'name', 'adder_0'), ...
                        struct('latency', 1, ...
                               'quantization', 'Round  (unbiased: +/- Inf)', ...
                               'overflow', 'Saturate', ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub3_din_2, xlsub3_din_1}, ...
                        {xlsub3_adder_0_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/adder_tree/adder_2
xlsub3_delay_1_out1 = xSignal;
xlsub3_adder_2 = xBlock(struct('source', 'AddSub', 'name', 'adder_2'), ...
                        struct('latency', 1, ...
                               'quantization', 'Round  (unbiased: +/- Inf)', ...
                               'overflow', 'Saturate', ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub3_delay_1_out1, xlsub3_adder_0_out1}, ...
                        {xlsub3_dout});

% block: cic_dec3_poly_model/mycic_dec3_poly/adder_tree/delay_1
xlsub3_delay_1 = xBlock(struct('source', 'Delay', 'name', 'delay_1'), ...
                        [], ...
                        {xlsub3_din_3}, ...
                        {xlsub3_delay_1_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/adder_tree/sync_delay
xlsub3_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           struct('latency', 2), ...
                           {xlsub3_sync}, ...
                           {xlsub3_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/adder_tree/zero_in
xlsub3_zero_in = xBlock(struct('source', 'Constant', 'name', 'zero_in'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 0, ...
                               'n_bits', 18, ...
                               'bin_pt', 17), ...
                        {}, ...
                        {[]});



end

function xlsub2_polynomial0()



%% inports
xlsub3_in = xInport('in');
xlsub3_sync = xInport('sync');

%% outports
xlsub3_out = xOutport('out');
xlsub3_sync_out = xOutport('sync_out');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/adder_blk1
xlsub3_delay0_out1 = xSignal;
xlsub3_shift_mult_array_out2 = xSignal;
xlsub3_adder_blk1 = xBlock(struct('source', 'AddSub', 'name', 'adder_blk1'), ...
                           struct('latency', 1), ...
                           {xlsub3_delay0_out1, xlsub3_shift_mult_array_out2}, ...
                           {xlsub3_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/delay0
xlsub3_shift_mult_array_out1 = xSignal;
xlsub3_delay0 = xBlock(struct('source', 'Delay', 'name', 'delay0'), ...
                       [], ...
                       {xlsub3_shift_mult_array_out1}, ...
                       {xlsub3_delay0_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/sync_delay1
xlsub3_shift_mult_array_out3 = xSignal;
xlsub3_sync_delay1 = xBlock(struct('source', 'Delay', 'name', 'sync_delay1'), ...
                            [], ...
                            {xlsub3_shift_mult_array_out3}, ...
                            {xlsub3_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array
xlsub3_shift_mult_array_sub = xBlock(struct('source', @xlsub3_shift_mult_array, 'name', 'shift_mult_array'), ...
                                 {}, ...
                                 {xlsub3_in, xlsub3_sync}, ...
                                 {xlsub3_shift_mult_array_out1, xlsub3_shift_mult_array_out2, xlsub3_shift_mult_array_out3});



function xlsub3_shift_mult_array()



%% inports
xlsub4_in = xInport('in');
xlsub4_sync = xInport('sync');

%% outports
xlsub4_out1 = xOutport('out1');
xlsub4_out2 = xOutport('out2');
xlsub4_sync_out = xOutport('sync_out');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/shift2
xlsub4_shift2_out1 = xSignal;
xlsub4_shift2 = xBlock(struct('source', 'Shift', 'name', 'shift2'), ...
                       struct('shift_bits', 1, ...
                              'precision', 'User Defined', ...
                              'n_bits', 9, ...
                              'bin_pt', 3), ...
                       {xlsub4_in}, ...
                       {xlsub4_shift2_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/shift3
xlsub4_shift3_out1 = xSignal;
xlsub4_shift3 = xBlock(struct('source', 'Shift', 'name', 'shift3'), ...
                       struct('precision', 'User Defined', ...
                              'n_bits', 10, ...
                              'bin_pt', 3), ...
                       {xlsub4_in}, ...
                       {xlsub4_shift3_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/sync_delay
xlsub4_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           [], ...
                           {xlsub4_sync}, ...
                           {xlsub4_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/adder_tree1
xlsub4_adder_tree1_sub = xBlock(struct('source', @xlsub4_adder_tree1, 'name', 'adder_tree1'), ...
                            {}, ...
                            {xlsub4_in, xlsub4_in, xlsub4_shift2_out1}, ...
                            {[], xlsub4_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/adder_tree2
xlsub4_adder_tree2_sub = xBlock(struct('source', @xlsub4_adder_tree2, 'name', 'adder_tree2'), ...
                            {}, ...
                            {xlsub4_in, xlsub4_shift2_out1, xlsub4_shift3_out1}, ...
                            {[], xlsub4_out2});



function xlsub4_adder_tree1()



%% inports
xlsub5_sync = xInport('sync');
xlsub5_din_1 = xInport('din_1');
xlsub5_din_2 = xInport('din_2');

%% outports
xlsub5_sync_out = xOutport('sync_out');
xlsub5_dout = xOutport('dout');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/adder_tree1/adder_0
xlsub5_adder_0 = xBlock(struct('source', 'AddSub', 'name', 'adder_0'), ...
                        struct('latency', 1, ...
                               'quantization', 'Round  (unbiased: +/- Inf)', ...
                               'overflow', 'Saturate', ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub5_din_2, xlsub5_din_1}, ...
                        {xlsub5_dout});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/adder_tree1/sync_delay
xlsub5_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           [], ...
                           {xlsub5_sync}, ...
                           {xlsub5_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/adder_tree1/zero_in
xlsub5_zero_in = xBlock(struct('source', 'Constant', 'name', 'zero_in'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 0, ...
                               'n_bits', 18, ...
                               'bin_pt', 17), ...
                        {}, ...
                        {[]});



end

function xlsub4_adder_tree2()



%% inports
xlsub5_sync = xInport('sync');
xlsub5_din_1 = xInport('din_1');
xlsub5_din_2 = xInport('din_2');

%% outports
xlsub5_sync_out = xOutport('sync_out');
xlsub5_dout = xOutport('dout');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/adder_tree2/adder_0
xlsub5_adder_0 = xBlock(struct('source', 'AddSub', 'name', 'adder_0'), ...
                        struct('latency', 1, ...
                               'quantization', 'Round  (unbiased: +/- Inf)', ...
                               'overflow', 'Saturate', ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub5_din_2, xlsub5_din_1}, ...
                        {xlsub5_dout});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/adder_tree2/sync_delay
xlsub5_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           [], ...
                           {xlsub5_sync}, ...
                           {xlsub5_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial0/shift_mult_array/adder_tree2/zero_in
xlsub5_zero_in = xBlock(struct('source', 'Constant', 'name', 'zero_in'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 0, ...
                               'n_bits', 18, ...
                               'bin_pt', 17), ...
                        {}, ...
                        {[]});



end

end

end

function xlsub2_polynomial1()



%% inports
xlsub3_in = xInport('in');
xlsub3_sync = xInport('sync');

%% outports
xlsub3_out = xOutport('out');
xlsub3_sync_out = xOutport('sync_out');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/adder_blk1
xlsub3_delay0_out1 = xSignal;
xlsub3_shift_mult_array_out2 = xSignal;
xlsub3_adder_blk1 = xBlock(struct('source', 'AddSub', 'name', 'adder_blk1'), ...
                           struct('latency', 1), ...
                           {xlsub3_delay0_out1, xlsub3_shift_mult_array_out2}, ...
                           {xlsub3_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/delay0
xlsub3_shift_mult_array_out1 = xSignal;
xlsub3_delay0 = xBlock(struct('source', 'Delay', 'name', 'delay0'), ...
                       [], ...
                       {xlsub3_shift_mult_array_out1}, ...
                       {xlsub3_delay0_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/sync_delay1
xlsub3_shift_mult_array_out3 = xSignal;
xlsub3_sync_delay1 = xBlock(struct('source', 'Delay', 'name', 'sync_delay1'), ...
                            [], ...
                            {xlsub3_shift_mult_array_out3}, ...
                            {xlsub3_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array
xlsub3_shift_mult_array_sub = xBlock(struct('source', @xlsub3_shift_mult_array, 'name', 'shift_mult_array'), ...
                                 {}, ...
                                 {xlsub3_in, xlsub3_sync}, ...
                                 {xlsub3_shift_mult_array_out1, xlsub3_shift_mult_array_out2, xlsub3_shift_mult_array_out3});



function xlsub3_shift_mult_array()



%% inports
xlsub4_in = xInport('in');
xlsub4_sync = xInport('sync');

%% outports
xlsub4_out1 = xOutport('out1');
xlsub4_out2 = xOutport('out2');
xlsub4_sync_out = xOutport('sync_out');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/shift2
xlsub4_shift2_out1 = xSignal;
xlsub4_shift2 = xBlock(struct('source', 'Shift', 'name', 'shift2'), ...
                       struct('shift_bits', 1, ...
                              'precision', 'User Defined', ...
                              'n_bits', 9, ...
                              'bin_pt', 3), ...
                       {xlsub4_in}, ...
                       {xlsub4_shift2_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/shift3
xlsub4_shift3_out1 = xSignal;
xlsub4_shift3 = xBlock(struct('source', 'Shift', 'name', 'shift3'), ...
                       struct('precision', 'User Defined', ...
                              'n_bits', 10, ...
                              'bin_pt', 3), ...
                       {xlsub4_in}, ...
                       {xlsub4_shift3_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/sync_delay
xlsub4_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           [], ...
                           {xlsub4_sync}, ...
                           {xlsub4_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/adder_tree1
xlsub4_adder_tree1_sub = xBlock(struct('source', @xlsub4_adder_tree1, 'name', 'adder_tree1'), ...
                            {}, ...
                            {xlsub4_in, xlsub4_shift2_out1, xlsub4_shift3_out1}, ...
                            {[], xlsub4_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/adder_tree2
xlsub4_adder_tree2_sub = xBlock(struct('source', @xlsub4_adder_tree2, 'name', 'adder_tree2'), ...
                            {}, ...
                            {xlsub4_in, xlsub4_in, xlsub4_shift2_out1}, ...
                            {[], xlsub4_out2});



function xlsub4_adder_tree1()



%% inports
xlsub5_sync = xInport('sync');
xlsub5_din_1 = xInport('din_1');
xlsub5_din_2 = xInport('din_2');

%% outports
xlsub5_sync_out = xOutport('sync_out');
xlsub5_dout = xOutport('dout');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/adder_tree1/adder_0
xlsub5_adder_0 = xBlock(struct('source', 'AddSub', 'name', 'adder_0'), ...
                        struct('latency', 1, ...
                               'quantization', 'Round  (unbiased: +/- Inf)', ...
                               'overflow', 'Saturate', ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub5_din_2, xlsub5_din_1}, ...
                        {xlsub5_dout});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/adder_tree1/sync_delay
xlsub5_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           [], ...
                           {xlsub5_sync}, ...
                           {xlsub5_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/adder_tree1/zero_in
xlsub5_zero_in = xBlock(struct('source', 'Constant', 'name', 'zero_in'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 0, ...
                               'n_bits', 18, ...
                               'bin_pt', 17), ...
                        {}, ...
                        {[]});



end

function xlsub4_adder_tree2()



%% inports
xlsub5_sync = xInport('sync');
xlsub5_din_1 = xInport('din_1');
xlsub5_din_2 = xInport('din_2');

%% outports
xlsub5_sync_out = xOutport('sync_out');
xlsub5_dout = xOutport('dout');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/adder_tree2/adder_0
xlsub5_adder_0 = xBlock(struct('source', 'AddSub', 'name', 'adder_0'), ...
                        struct('latency', 1, ...
                               'quantization', 'Round  (unbiased: +/- Inf)', ...
                               'overflow', 'Saturate', ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub5_din_2, xlsub5_din_1}, ...
                        {xlsub5_dout});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/adder_tree2/sync_delay
xlsub5_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           [], ...
                           {xlsub5_sync}, ...
                           {xlsub5_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial1/shift_mult_array/adder_tree2/zero_in
xlsub5_zero_in = xBlock(struct('source', 'Constant', 'name', 'zero_in'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 0, ...
                               'n_bits', 18, ...
                               'bin_pt', 17), ...
                        {}, ...
                        {[]});



end

end

end

function xlsub2_polynomial2()



%% inports
xlsub3_in = xInport('in');
xlsub3_sync = xInport('sync');

%% outports
xlsub3_out = xOutport('out');
xlsub3_sync_out = xOutport('sync_out');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/adder_blk1
xlsub3_delay0_out1 = xSignal;
xlsub3_shift_mult_array_out2 = xSignal;
xlsub3_adder_blk1_out1 = xSignal;
xlsub3_adder_blk1 = xBlock(struct('source', 'AddSub', 'name', 'adder_blk1'), ...
                           struct('latency', 1), ...
                           {xlsub3_delay0_out1, xlsub3_shift_mult_array_out2}, ...
                           {xlsub3_adder_blk1_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/adder_blk2
xlsub3_shift_mult_array_out3 = xSignal;
xlsub3_adder_blk2 = xBlock(struct('source', 'AddSub', 'name', 'adder_blk2'), ...
                           struct('latency', 1), ...
                           {xlsub3_adder_blk1_out1, xlsub3_shift_mult_array_out3}, ...
                           {xlsub3_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/delay0
xlsub3_shift_mult_array_out1 = xSignal;
xlsub3_delay0 = xBlock(struct('source', 'Delay', 'name', 'delay0'), ...
                       [], ...
                       {xlsub3_shift_mult_array_out1}, ...
                       {xlsub3_delay0_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/sync_delay1
xlsub3_shift_mult_array_out4 = xSignal;
xlsub3_sync_delay1 = xBlock(struct('source', 'Delay', 'name', 'sync_delay1'), ...
                            [], ...
                            {xlsub3_shift_mult_array_out4}, ...
                            {xlsub3_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array
xlsub3_shift_mult_array_sub = xBlock(struct('source', @xlsub3_shift_mult_array, 'name', 'shift_mult_array'), ...
                                 {}, ...
                                 {xlsub3_in, xlsub3_sync}, ...
                                 {xlsub3_shift_mult_array_out1, xlsub3_shift_mult_array_out2, xlsub3_shift_mult_array_out3, xlsub3_shift_mult_array_out4});



function xlsub3_shift_mult_array()



%% inports
xlsub4_in = xInport('in');
xlsub4_sync = xInport('sync');

%% outports
xlsub4_out1 = xOutport('out1');
xlsub4_out2 = xOutport('out2');
xlsub4_out3 = xOutport('out3');
xlsub4_sync_out = xOutport('sync_out');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/delay1
xlsub4_delay1_out1 = xSignal;
xlsub4_delay1 = xBlock(struct('source', 'Delay', 'name', 'delay1'), ...
                       struct('latency', 2), ...
                       {xlsub4_in}, ...
                       {xlsub4_delay1_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/shift2
xlsub4_shift2_out1 = xSignal;
xlsub4_shift2 = xBlock(struct('source', 'Shift', 'name', 'shift2'), ...
                       struct('shift_bits', 1, ...
                              'precision', 'User Defined', ...
                              'n_bits', 9, ...
                              'bin_pt', 3), ...
                       {xlsub4_in}, ...
                       {xlsub4_shift2_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/shift3
xlsub4_shift3_out1 = xSignal;
xlsub4_shift3 = xBlock(struct('source', 'Shift', 'name', 'shift3'), ...
                       struct('precision', 'User Defined', ...
                              'n_bits', 10, ...
                              'bin_pt', 3), ...
                       {xlsub4_in}, ...
                       {xlsub4_shift3_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/sync_delay
xlsub4_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           struct('latency', 2), ...
                           {xlsub4_sync}, ...
                           {xlsub4_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/adder_tree2
xlsub4_adder_tree2_sub = xBlock(struct('source', @xlsub4_adder_tree2, 'name', 'adder_tree2'), ...
                            {}, ...
                            {xlsub4_in, xlsub4_in, xlsub4_shift2_out1, xlsub4_shift3_out1}, ...
                            {[], xlsub4_out2});

% extra outport assignment
xlsub4_out1.assign(xlsub4_delay1_out1);
xlsub4_out3.assign(xlsub4_delay1_out1);


function xlsub4_adder_tree2()



%% inports
xlsub5_sync = xInport('sync');
xlsub5_din_1 = xInport('din_1');
xlsub5_din_2 = xInport('din_2');
xlsub5_din_3 = xInport('din_3');

%% outports
xlsub5_sync_out = xOutport('sync_out');
xlsub5_dout = xOutport('dout');

%% diagram

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/adder_tree2/adder_0
xlsub5_adder_0_out1 = xSignal;
xlsub5_adder_0 = xBlock(struct('source', 'AddSub', 'name', 'adder_0'), ...
                        struct('latency', 1, ...
                               'quantization', 'Round  (unbiased: +/- Inf)', ...
                               'overflow', 'Saturate', ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub5_din_2, xlsub5_din_1}, ...
                        {xlsub5_adder_0_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/adder_tree2/adder_2
xlsub5_delay_1_out1 = xSignal;
xlsub5_adder_2 = xBlock(struct('source', 'AddSub', 'name', 'adder_2'), ...
                        struct('latency', 1, ...
                               'quantization', 'Round  (unbiased: +/- Inf)', ...
                               'overflow', 'Saturate', ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub5_delay_1_out1, xlsub5_adder_0_out1}, ...
                        {xlsub5_dout});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/adder_tree2/delay_1
xlsub5_delay_1 = xBlock(struct('source', 'Delay', 'name', 'delay_1'), ...
                        [], ...
                        {xlsub5_din_3}, ...
                        {xlsub5_delay_1_out1});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/adder_tree2/sync_delay
xlsub5_sync_delay = xBlock(struct('source', 'Delay', 'name', 'sync_delay'), ...
                           struct('latency', 2), ...
                           {xlsub5_sync}, ...
                           {xlsub5_sync_out});

% block: cic_dec3_poly_model/mycic_dec3_poly/polynomial2/shift_mult_array/adder_tree2/zero_in
xlsub5_zero_in = xBlock(struct('source', 'Constant', 'name', 'zero_in'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 0, ...
                               'n_bits', 18, ...
                               'bin_pt', 17), ...
                        {}, ...
                        {[]});



end

end

end

end

