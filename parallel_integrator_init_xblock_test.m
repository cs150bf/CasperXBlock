%% This is abandoned because
%% It doesn't work, the delay amount is hard to aligned 
% just use the parallel_integrator_init_xblock

function parallel_integrator_init_xblock_test(n_stages,n_inputs,add_latency,skip, n_bits, bin_pt,dec2_halfout)
inports = cell(1,n_inputs);
outports = cell(1,n_inputs/2);

for i =1:n_inputs
    inports{i} = xInport(['in_',num2str(i)]);
    if mod(i+skip,2) == 0
     outports{int32(i/2)} = xOutport(['out_',num2str(int32(i/2))]);
    end
end


adder_blks = cell(1,n_inputs);
signals = cell(1,n_inputs);
signals{n_inputs} = xSignal(['sig_',num2str(n_inputs)]);
d_signal = xSignal('d_signal');
delay = xBlock(struct('source', 'Delay', 'name', 'Delay'), ...
                          struct('latency', 1), ...
                          {signals{n_inputs}}, ...
                          {d_signal});
signals{1} = xSignal('sig_1');
adder_blks{1} = xBlock(struct('source','AddSub', 'name', 'adder_blk1'), ...
                             struct('mode', 'Addition', 'latency', add_latency, 'precision', 'User Defined', ...
                                    'arith_type', 'Signed  (2''s comp)', ...
                                    'n_bits', n_bits, 'bin_pt', bin_pt, ...
                                    'quantization', 'Round  (unbiased: +/- Inf)',...
                                    'overflow', 'Wrap', ...
                                    'use_behavioral_HDL', 'off', 'hw_selection', 'Fabric'), ...
                                    {d_signal, inports{1}}, ...
                                    {signals{1}});    
for i =2:n_inputs
    if i<n_inputs
        signals{i} = xSignal(['sig_',num2str(i)]);
    end
    adder_blks{i} = xBlock(struct('source','AddSub', 'name', ['adder_blk',num2str(i)]), ...
                             struct('mode', 'Addition', 'latency', add_latency, 'precision', 'User Defined', ...
                                    'arith_type', 'Signed  (2''s comp)', ...
                                    'n_bits', n_bits, 'bin_pt', bin_pt, ...
                                    'quantization', 'Round  (unbiased: +/- Inf)',...
                                    'overflow', 'Wrap', ...
                                    'use_behavioral_HDL', 'off', 'hw_selection', 'Fabric'), ...
                                    {signals{i-1}, inports{i}}, ...
                                    {signals{i}});    
end

for i=1:n_inputs
    if mod(i+skip,2)==0
        outports{int32(i/2)}.bind(signals{i});
    else
        terminator=xBlock(struct('source', 'Terminator', 'name', ['Terminator',num2str(i)]), ...
                           {}, ...
                           {signals{i}}, ...
                           {});
    end
end

end