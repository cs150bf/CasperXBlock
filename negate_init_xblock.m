%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
%   Center for Astronomy Signal Processing and Electronics Research           %
%   http://casper.berkeley.edu                                                %      
%   Copyright (C) 2011 Suraj Gowda  Hong Chen                                 %
%                                                                             %
%   This program is free software; you can redistribute it and/or modify      %
%   it under the terms of the GNU General Public License as published by      %
%   the Free Software Foundation; either version 2 of the License, or         %
%   (at your option) any later version.                                       %
%                                                                             %
%   This program is distributed in the hope that it will be useful,           %
%   but WITHOUT ANY WARRANTY; without even the implied warranty of            %
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             %
%   GNU General Public License for more details.                              %
%                                                                             %
%   You should have received a copy of the GNU General Public License along   %
%   with this program; if not, write to the Free Software Foundation, Inc.,   %
%   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.               %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function negate_init_xblock(blk, input_bit_width, input_bin_pt, latency, mode)
%% inports
In1 = xInport('a');

%% outports
Out1 = xOutport('-a');

%% error checking
if strcmp(mode, 'dsp48e') && input_bit_width > 18
    error('negate_init.m: Unsupported bit width for mode=dsp48e');
end

%% diagram
if strcmp(mode, 'dsp48e')
    Convert_out1 = xSignal;
    Reinterpret_out1 = xSignal;
    negate_dsp48_out1 = xSignal;
    Reinterpret1_out1 = xSignal;
    alucode3_out1 = xSignal;
    carryin3_out1 = xSignal;
    carryinsel3_out1 = xSignal;
    opcode1_out1 = xSignal;
    opcode3_out1 = xSignal;
    Convert = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
                            struct('n_bits', 18, ...
                                   'bin_pt', input_bin_pt), ...
                            {In1}, ...
                            {Convert_out1});


    Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
                             struct('n_bits', input_bit_width, ...
                                    'bin_pt', input_bin_pt), ...
                             {Reinterpret_out1}, ...
                             {Out1});

    Reinterpret = xBlock(struct('source', 'Reinterpret', 'name', 'Reinterpret'), ...
                                struct('force_arith_type', 'on', ...
                                       'arith_type', 'Signed  (2''s comp)', ...
                                       'force_bin_pt', 'on', ...
                                       'bin_pt', input_bin_pt), ...
                                {negate_dsp48_out1}, ...
                                {Reinterpret_out1});

    Reinterpret1 = xBlock(struct('source', 'Reinterpret', 'name', 'Reinterpret1'), ...
                                 struct('force_arith_type', 'on', ...
                                        'arith_type', 'Signed  (2''s comp)', ...
                                        'force_bin_pt', 'on'), ...
                                 {Convert_out1}, ...
                                 {Reinterpret1_out1});



    dsp48e0 = xBlock(struct('source', 'DSP48E', 'name', 'DSP48E0'), ...
                                 [], ...
                                 {opcode1_out1, Reinterpret1_out1, opcode3_out1, alucode3_out1, carryin3_out1, carryinsel3_out1}, ...
                                 {negate_dsp48_out1});

    %%%%%%%%%%%                         
    % Constants
    %%%%%%%%%%%

    negate_factor = xBlock(struct('source', 'Constant', 'name', 'negate_factor'), ...
                            struct('const', -1, ...
                                   'n_bits', 30, ...
                                   'bin_pt', 0, ...
                                   'explicit_period', 'on'), ...
                            {}, ...
                            {opcode1_out1});

    opmode0 = xBlock(struct('source', 'Constant', 'name', 'opmode0'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'const', 5, ...
                                   'n_bits', 7, ...
                                   'bin_pt', 0, ...
                                   'explicit_period', 'on'), ...
                            {}, ...
                            {opcode3_out1});

    alumode0 = xBlock(struct('source', 'Constant', 'name', 'alumode0'), ...
                             struct('arith_type', 'Unsigned', ...
                                    'const', 0, ...
                                    'n_bits', 4, ...
                                    'bin_pt', 0, ...
                                    'explicit_period', 'on'), ...
                             {}, ...
                             {alucode3_out1});

    carryin0 = xBlock(struct('source', 'Constant', 'name', 'carryin0'), ...
                             struct('arith_type', 'Unsigned', ...
                                    'const', 0, ...
                                    'n_bits', 1, ...
                                    'bin_pt', 0, ...
                                    'explicit_period', 'on'), ...
                             {}, ...
                             {carryin3_out1});

    carryinsel0 = xBlock(struct('source', 'Constant', 'name', 'carryinsel0'), ...
                                struct('arith_type', 'Unsigned', ...
                                       'const', 0, ...
                                       'n_bits', 3, ...
                                       'bin_pt', 0, ...
                                       'explicit_period', 'on'), ...
                                {}, ...
                                {carryinsel3_out1});
% end first case                            
elseif strcmp(mode, 'logic')
    fabric_negate = xBlock(struct('source', 'Negate', 'name', 'negate'), ...
        struct('latency', latency, 'precision', 'User Defined', 'n_bits', input_bit_width, 'bin_pt', input_bin_pt), ...
        {In1}, ...
        {Out1});

else 
    error('negate_init.m: Unsupported mode');
    
end


if ~isempty(blk) && ~strcmp(blk(1),'/')
    clean_blocks(blk);
end

end

