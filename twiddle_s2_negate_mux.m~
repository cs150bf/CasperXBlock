%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                             %
%   Center for Astronomy Signal Processing and Electronics Research           %
%   http://casper.berkeley.edu                                                %      
%   Copyright (C) 2011 Suraj Gowda                                            %
%                                                                             %
%   This program is free software; you can redistribute it and/or modify      %
%   it under the terms of the GNU General Public License as published by      %
%   the Free Software Foundation; either version 2 of the License, or         %
%   (at your option) any later version.                                       %
%                                                                             %
%   This program is distributed in the hope that it will be useful,           %
%   but WITHOUT ANY WARRANTY; without even the implied warranty of            %
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             %
%   GNU General Public License for more details.                              %
%                                                                             %
%   You should have received a copy of the GNU General Public License along   %
%   with this program; if not, write to the Free Software Foundation, Inc.,   %
%   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.               %
%                                                                             %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function twiddle_s2_negate_mux(mux_latency, input_bit_width, input_bin_pt)
% This is a generated function based on subsystem:
%     twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux
% Though there are limitations about the generated script, 
% the main purpose of this utility is to make learning
% Sysgen Script easier.
% 
% To test it, run the following commands from MATLAB console:
% cfg.source = str2func('twiddle_s2_negate_mux');
% cfg.toplevel = 'twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux';
% args = {my_mux_latency, my_input_bit_width, my_input_bin_pt};
% xBlock(cfg, args);
% 
% You can edit twiddle_s2_negate_mux.m to debug your script.
% 
% You can also replace the MaskInitialization code with the 
% following commands so the subsystem will be generated 
% according to the values of mask parameters.
% cfg.source = str2func('twiddle_s2_negate_mux');
% cfg.toplevel = gcb;
% args = {mux_latency, input_bit_width, input_bin_pt};
% xBlock(cfg, args);
% 
% To configure the xBlock call in debug mode, in which mode,
% autolayout will be performed every time a block is added,
% run the following commands:
% cfg.source = str2func('twiddle_s2_negate_mux');
% cfg.toplevel = gcb;
% See also xBlock, xInport, xOutport, xSignal, xlsub2script.


%% inports
xlsub3_sel = xInport('sel');
xlsub3_b_re = xInport('b_re');
xlsub3_b_im = xInport('b_im');

%% outports
xlsub3_bw_im = xOutport('bw_im');

%% diagram

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/Convert
xlsub3_Convert_out1 = xSignal;
xlsub3_Convert = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
                        struct('n_bits', 18, ...
                               'bin_pt', 18 - (input_bit_width - input_bin_pt)), ...
                        {xlsub3_b_re}, ...
                        {xlsub3_Convert_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/Convert1
xlsub3_Reinterpret_out1 = xSignal;
xlsub3_Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
                         struct('n_bits', input_bit_width, ...
                                'bin_pt', input_bin_pt, ...
                                'latency', mux_latency-3), ...
                         {xlsub3_Reinterpret_out1}, ...
                         {xlsub3_bw_im});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/Convert2
xlsub3_cin_delay_out1 = xSignal;
xlsub3_Convert2_out1 = xSignal;
xlsub3_Convert2 = xBlock(struct('source', 'Convert', 'name', 'Convert2'), ...
                         struct('n_bits', 48, ...
                                'bin_pt', 18 - (input_bit_width - input_bin_pt)), ...
                         {xlsub3_cin_delay_out1}, ...
                         {xlsub3_Convert2_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/DSP48E
xlsub3_negate_factor_out1 = xSignal;
xlsub3_Reinterpret1_out1 = xSignal;
xlsub3_Reinterpret2_out1 = xSignal;
xlsub3_mux2_out1 = xSignal;
xlsub3_alumode0_out1 = xSignal;
xlsub3_carryin0_out1 = xSignal;
xlsub3_carryinsel0_out1 = xSignal;
xlsub3_DSP48E_out1 = xSignal;
xlsub3_DSP48E = xBlock(struct('source', 'DSP48E', 'name', 'DSP48E'), ...
                       struct('use_creg', 'on'), ...
                       {xlsub3_negate_factor_out1, xlsub3_Reinterpret1_out1, xlsub3_Reinterpret2_out1, xlsub3_mux2_out1, xlsub3_alumode0_out1, xlsub3_carryin0_out1, xlsub3_carryinsel0_out1}, ...
                       {xlsub3_DSP48E_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/Reinterpret
xlsub3_Reinterpret = xBlock(struct('source', 'Reinterpret', 'name', 'Reinterpret'), ...
                            struct('force_arith_type', 'on', ...
                                   'arith_type', 'Signed  (2''s comp)', ...
                                   'force_bin_pt', 'on', ...
                                   'bin_pt', 18 - (input_bit_width-input_bin_pt)), ...
                            {xlsub3_DSP48E_out1}, ...
                            {xlsub3_Reinterpret_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/Reinterpret1
xlsub3_Reinterpret1 = xBlock(struct('source', 'Reinterpret', 'name', 'Reinterpret1'), ...
                             struct('force_arith_type', 'on', ...
                                    'arith_type', 'Signed  (2''s comp)', ...
                                    'force_bin_pt', 'on'), ...
                             {xlsub3_Convert_out1}, ...
                             {xlsub3_Reinterpret1_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/Reinterpret2
xlsub3_Reinterpret2 = xBlock(struct('source', 'Reinterpret', 'name', 'Reinterpret2'), ...
                             struct('force_arith_type', 'on', ...
                                    'arith_type', 'Signed  (2''s comp)', ...
                                    'force_bin_pt', 'on'), ...
                             {xlsub3_Convert2_out1}, ...
                             {xlsub3_Reinterpret2_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/alumode0
xlsub3_alumode0 = xBlock(struct('source', 'Constant', 'name', 'alumode0'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', 0, ...
                                'n_bits', 4, ...
                                'bin_pt', 0, ...
                                'explicit_period', 'on'), ...
                         {}, ...
                         {xlsub3_alumode0_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/carryin0
xlsub3_carryin0 = xBlock(struct('source', 'Constant', 'name', 'carryin0'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', 0, ...
                                'n_bits', 1, ...
                                'bin_pt', 0, ...
                                'explicit_period', 'on'), ...
                         {}, ...
                         {xlsub3_carryin0_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/carryinsel0
xlsub3_carryinsel0 = xBlock(struct('source', 'Constant', 'name', 'carryinsel0'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'const', 0, ...
                                   'n_bits', 3, ...
                                   'bin_pt', 0, ...
                                   'explicit_period', 'on'), ...
                            {}, ...
                            {xlsub3_carryinsel0_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/cin_delay
xlsub3_cin_delay = xBlock(struct('source', 'Delay', 'name', 'cin_delay'), ...
                          struct('reg_retiming', 'on'), ...
                          {xlsub3_b_im}, ...
                          {xlsub3_cin_delay_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/mux2
xlsub3_opmode_b_re_out1 = xSignal;
xlsub3_opmode_negb_im_out1 = xSignal;
xlsub3_mux2 = xBlock(struct('source', 'Mux', 'name', 'mux2'), ...
                     [], ...
                     {xlsub3_sel, xlsub3_opmode_b_re_out1, xlsub3_opmode_negb_im_out1}, ...
                     {xlsub3_mux2_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/negate_factor
xlsub3_negate_factor = xBlock(struct('source', 'Constant', 'name', 'negate_factor'), ...
                              struct('const', -1, ...
                                     'n_bits', 30, ...
                                     'bin_pt', 0, ...
                                     'explicit_period', 'on'), ...
                              {}, ...
                              {xlsub3_negate_factor_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/opmode_b_re
xlsub3_opmode_b_re = xBlock(struct('source', 'Constant', 'name', 'opmode_b_re'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'const', 48, ...
                                   'n_bits', 7, ...
                                   'bin_pt', 0, ...
                                   'explicit_period', 'on'), ...
                            {}, ...
                            {xlsub3_opmode_b_re_out1});

% block: twiddle_stage_2_test/twiddle_stage_1/twiddle_s2_negate_mux/opmode_negb_im
xlsub3_opmode_negb_im = xBlock(struct('source', 'Constant', 'name', 'opmode_negb_im'), ...
                               struct('arith_type', 'Unsigned', ...
                                      'const', 5, ...
                                      'n_bits', 7, ...
                                      'bin_pt', 0, ...
                                      'explicit_period', 'on'), ...
                               {}, ...
                               {xlsub3_opmode_negb_im_out1});



end

